-- INCIDENTS TABLE: Details about various international incidents
CREATE TABLE incidents (
    incident_id INTEGER PRIMARY KEY,
    incident_name TEXT,
    location TEXT,
    incident_date DATE,
    threat_level TEXT,
    description TEXT
);

INSERT INTO incidents (incident_id, incident_name, location, incident_date, threat_level, description)
VALUES
    (1, 'Cyber Attack on Energy Infrastructure', 'Country A', '2023-05-15', 'High', 'A significant cyber attack targeting the energy infrastructure, causing widespread power outages.'),
    (2, 'Espionage Activity Detected', 'Country B', '2023-06-20', 'Medium', 'Suspicious activities indicating a potential espionage operation by a foreign intelligence service.'),
    (3, 'Attempted Smuggling of Sensitive Technology', 'Country C', '2023-07-05', 'Critical', 'Intercepted attempt to smuggle advanced technological components out of the country.');

-- AGENTS REPORTS TABLE: Reports filed by agents on incidents
CREATE TABLE agents_reports (
    report_id INTEGER PRIMARY KEY,
    incident_id INTEGER,
    agent_id TEXT,
    report_date DATE,
    findings TEXT,
    recommendations TEXT,
    FOREIGN KEY (incident_id) REFERENCES incidents (incident_id)
);

INSERT INTO agents_reports (report_id, incident_id, agent_id, report_date, findings, recommendations)
VALUES
    (1, 1, 'AGT1001', '2023-05-16', 'Confirmed cyber attack origins from Country X. Major vulnerabilities exploited in the energy grid software.', 'Recommend immediate cybersecurity review and reinforcement of critical infrastructure.'),
    (2, 2, 'AGT1002', '2023-06-21', 'Detected espionage activities link back to known operatives of Country Y. Surveillance and countermeasures initiated.', 'Suggest increasing counter-intelligence operations in key areas and enhancing security clearances.'),
    (3, 3, 'AGT1003', '2023-07-06', 'Technology seized is cutting-edge and likely intended for military applications by Country Z. Successful interception prevents potential security breach.', 'Advise strengthening export controls and enhancing border security measures.');

#This query provides a summary of incidents grouped by threat level, showing the count of incidents at each level. It's an essential analysis for understanding the distribution of incidents based on severity.
SELECT threat_level, COUNT(incident_id) AS incident_count
FROM incidents
GROUP BY threat_level
ORDER BY incident_count DESC;

#For in-depth analysis or briefing purposes, this query fetches all relevant details about a specific incident, including agent reports. It uses a JOIN to combine data from both tables.
SELECT i.incident_name, i.location, i.incident_date, i.threat_level, i.description, 
       ar.agent_id, ar.report_date, ar.findings, ar.recommendations
FROM incidents i
JOIN agents_reports ar ON i.incident_id = ar.incident_id
WHERE i.incident_name = 'Cyber Attack on Energy Infrastructure';

#Identifying incidents that lack detailed follow-up can highlight gaps in intelligence coverage. This query finds incidents that don't yet have corresponding agent reports.
SELECT *
FROM incidents
WHERE incident_id NOT IN (
    SELECT DISTINCT incident_id
    FROM agents_reports);

#This query ranks agents by the number of reports they've filed, providing insight into agent activity levels. Such analysis can be used for performance evaluation or workload distribution.
SELECT agent_id, COUNT(report_id) AS reports_filed
FROM agents_reports
GROUP BY agent_id
ORDER BY reports_filed DESC;

#Fetching the most recent incidents along with their first reports can provide quick insights into fresh intelligence matters. This query demonstrates working with dates and ordering.
SELECT i.incident_id, i.incident_name, i.incident_date, i.threat_level,
       ar.report_id, ar.agent_id, ar.report_date
FROM incidents i
JOIN agents_reports ar ON i.incident_id = ar.incident_id
WHERE ar.report_date = (
    SELECT MIN(report_date)
    FROM agents_reports ar2
    WHERE ar2.incident_id = i.incident_id
)
ORDER BY i.incident_date DESC
LIMIT 5;

#This advanced query could analyze the correlation between threat levels and the speed of report submission by agents, potentially indicating areas for operational improvement.
SELECT i.threat_level, AVG(julianday(ar.report_date) - julianday(i.incident_date)) AS avg_response_time_days
FROM incidents i
JOIN agents_reports ar ON i.incident_id = ar.incident_id
GROUP BY i.threat_level
ORDER BY avg_response_time_days;
