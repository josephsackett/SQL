# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10

#Then I found which artist released the longest song
SELECT artist_name, track_name, MAX(duration_ms) AS longest_duration
FROM spotify_top50;

#Then I found the average tempo vary by artist
SELECT artist_name, AVG(tempo) AS average_tempo
FROM spotify_top50
GROUP BY artist_name
ORDER BY average_tempo DESC;

#I looked at top 5 artists whose songs have the highest average speechiness, but only considered artists with at least 3 songs in the dataset.
SELECT artist_name, AVG(speechiness) AS avg_speechiness
FROM Spotifydata
GROUP BY artist_name
HAVING COUNT(track_name) >= 3
ORDER BY avg_speechiness DESC
LIMIT 5;

